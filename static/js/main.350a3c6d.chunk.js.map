{"version":3,"sources":["../../src/index.js","App.js","reportWebVitals.js","index.js"],"names":["SplitPolygonMode","DrawLineString","onSetup","opts","line","currentVertexPosition","featureId","main","this","getSelected","filter","f","type","map","toGeoJSON","length","Error","direction","getFeature","from","geometry","coordinates","Array","isArray","lastCoord","addCoordinate","newFeature","Constants","FEATURE","properties","LINE_STRING","addFeature","clearSelectedFeatures","doubleClickZoom","disable","updateUIClasses","mouse","ADD","activateUIButton","LINE","setActionableState","trash","onStop","state","enable","undefined","id","removeCoordinate","isValid","forEach","el","booleanWithin","point","poly","idPrefix","i","j","forCut","forSelect","thickLineString","thickLinePolygon","clipped","polyg","THICK_LINE_UNITS","THICK_LINE_WIDTH","polyCoords","cutPolyGeoms","cutFeatures","offsetLine","retVal","lineIntersect","features","lineCoords","getCoords","lineOffset","units","push","lineString","lineToPolygon","difference","polygon","index","featureCollection","polygonCut","el2","afterSplit","deleteFeature","silent","changeMode","SIMPLE_SELECT","toDisplayFeatures","geojson","display","isActiveLine","active","ACTIVE","INACTIVE","meta","createVertex","draw","drawBar","extendDrawBar","opt","ctrl","buttons","onAddOrig","onAdd","onRemoveOrig","onRemove","elContainer","b","addButton","removeButton","elButton","document","createElement","className","classes","c","classList","add","addEventListener","on","action","appendChild","removeEventListener","remove","App","mapboxGl","getRTLTextPluginStatus","setRTLTextPlugin","err","console","error","mapRef","useRef","useEffect","Map","container","current","style","center","zoom","pitch","interactive","hash","attributionControl","customAttribution","transformRequest","url","headers","MapboxDraw","modes","splitPolygunMode","SplitPolygunMode","userProperties","splitPolygon","once","resize","addControl","set","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.350a3c6d.chunk.js","sourcesContent":["import lineIntersect from '@turf/line-intersect';\nimport booleanWithin from '@turf/boolean-within';\nimport { getCoords } from '@turf/invariant';\nimport { point, lineString, polygon, featureCollection } from '@turf/helpers';\nimport lineOffset from '@turf/line-offset';\nimport lineToPolygon from '@turf/line-to-polygon';\nimport difference from '@turf/difference';\n\nimport DrawLineString from '@mapbox/mapbox-gl-draw/src/modes/draw_line_string';\n\nimport doubleClickZoom from '@mapbox/mapbox-gl-draw/src/lib/double_click_zoom';\nimport * as Constants from '@mapbox/mapbox-gl-draw/src/constants';\nimport createVertex from '@mapbox/mapbox-gl-draw/src/lib/create_vertex';\n\nconst SplitPolygonMode = { ...DrawLineString };\n\nSplitPolygonMode.onSetup = function (opts) {\n  opts = opts || {};\n  const featureId = opts.featureId;\n\n  let main = this.getSelected()\n    .filter((f) => f.type === 'Polygon' || f.type === 'MultiPolygon')\n    .map((f) => f.toGeoJSON());\n  if (main.length < 1) {\n    throw new Error(\n      'Please select a feature/features (Polygon or MultiPolygon) to split!'\n    );\n  }\n\n  let line, currentVertexPosition;\n  let direction = 'forward';\n  if (featureId) {\n    line = this.getFeature(featureId);\n    if (!line) {\n      throw new Error('Could not find a feature with the provided featureId');\n    }\n    let from = opts.from;\n    if (\n      from &&\n      from.type === 'Feature' &&\n      from.geometry &&\n      from.geometry.type === 'Point'\n    ) {\n      from = from.geometry;\n    }\n    if (\n      from &&\n      from.type === 'Point' &&\n      from.coordinates &&\n      from.coordinates.length === 2\n    ) {\n      from = from.coordinates;\n    }\n    if (!from || !Array.isArray(from)) {\n      throw new Error(\n        'Please use the `from` property to indicate which point to continue the line from'\n      );\n    }\n    const lastCoord = line.coordinates.length - 1;\n    if (\n      line.coordinates[lastCoord][0] === from[0] &&\n      line.coordinates[lastCoord][1] === from[1]\n    ) {\n      currentVertexPosition = lastCoord + 1;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[lastCoord]);\n    } else if (\n      line.coordinates[0][0] === from[0] &&\n      line.coordinates[0][1] === from[1]\n    ) {\n      direction = 'backwards';\n      currentVertexPosition = 0;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[0]);\n    } else {\n      throw new Error(\n        '`from` should match the point at either the start or the end of the provided LineString'\n      );\n    }\n  } else {\n    line = this.newFeature({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.LINE_STRING,\n        coordinates: [],\n      },\n    });\n    currentVertexPosition = 0;\n    this.addFeature(line);\n  }\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.LINE);\n  this.setActionableState({\n    trash: true,\n  });\n\n  return {\n    main,\n    line,\n    currentVertexPosition,\n    direction,\n  };\n};\n\nSplitPolygonMode.onStop = function (state) {\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.line.id) === undefined) return;\n\n  //remove last added coordinate\n  state.line.removeCoordinate(`${state.currentVertexPosition}`);\n  if (state.line.isValid()) {\n    state.main.forEach((el) => {\n      if (\n        booleanWithin(point(state.line.coordinates[0]), el) ||\n        booleanWithin(\n          point(state.line.coordinates[state.line.coordinates.length - 1]),\n          el\n        )\n      ) {\n        throw new Error('Line must be outside of Polygon');\n      } else {\n        let polycut = polygonCut(\n          el.geometry,\n          state.line.toGeoJSON().geometry,\n          'piece-'\n        );\n        polycut.features.forEach((el2) => {\n          let afterSplit = this.newFeature(el2);\n          this.addFeature(afterSplit);\n        });\n        this.deleteFeature([el.id], { silent: true });\n      }\n    });\n    this.deleteFeature([state.line.id], { silent: true });\n  } else {\n    this.deleteFeature([state.line.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n  }\n};\n\nSplitPolygonMode.toDisplayFeatures = function (state, geojson, display) {\n  const isActiveLine = geojson.properties.id === state.line.id;\n  geojson.properties.active = isActiveLine\n    ? Constants.activeStates.ACTIVE\n    : Constants.activeStates.INACTIVE;\n  if (!isActiveLine) return display(geojson);\n  // Only render the line if it has at least one real coordinate\n  if (geojson.geometry.coordinates.length < 2) return;\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(\n    createVertex(\n      state.line.id,\n      geojson.geometry.coordinates[\n        state.direction === 'forward'\n          ? geojson.geometry.coordinates.length - 2\n          : 1\n      ],\n      `${\n        state.direction === 'forward'\n          ? geojson.geometry.coordinates.length - 2\n          : 1\n      }`,\n      false\n    )\n  );\n\n  display(geojson);\n};\n\nexport default SplitPolygonMode;\n\nfunction polygonCut(poly, line, idPrefix) {\n  const THICK_LINE_UNITS = 'kilometers';\n  const THICK_LINE_WIDTH = 0.001;\n  var i, j, id, intersectPoints, lineCoords, forCut, forSelect;\n  var thickLineString, thickLinePolygon, clipped, polyg, intersect;\n  var polyCoords = [];\n  var cutPolyGeoms = [];\n  var cutFeatures = [];\n  var offsetLine = [];\n  var retVal = null;\n\n  if (\n    (poly.type != 'Polygon' && poly.type != 'MultiPolygon') ||\n    line.type != 'LineString'\n  ) {\n    return retVal;\n  }\n\n  if (typeof idPrefix === 'undefined') {\n    idPrefix = '';\n  }\n\n  intersectPoints = lineIntersect(poly, line);\n  if (intersectPoints.features.length == 0) {\n    return retVal;\n  }\n\n  var lineCoords = getCoords(line);\n  if (\n    booleanWithin(point(lineCoords[0]), poly) ||\n    booleanWithin(point(lineCoords[lineCoords.length - 1]), poly)\n  ) {\n    return retVal;\n  }\n\n  offsetLine[0] = lineOffset(line, THICK_LINE_WIDTH, {\n    units: THICK_LINE_UNITS,\n  });\n  offsetLine[1] = lineOffset(line, -THICK_LINE_WIDTH, {\n    units: THICK_LINE_UNITS,\n  });\n\n  for (i = 0; i <= 1; i++) {\n    forCut = i;\n    forSelect = (i + 1) % 2;\n    polyCoords = [];\n    for (j = 0; j < line.coordinates.length; j++) {\n      polyCoords.push(line.coordinates[j]);\n    }\n    for (j = offsetLine[forCut].geometry.coordinates.length - 1; j >= 0; j--) {\n      polyCoords.push(offsetLine[forCut].geometry.coordinates[j]);\n    }\n    polyCoords.push(line.coordinates[0]);\n\n    thickLineString = lineString(polyCoords);\n    thickLinePolygon = lineToPolygon(thickLineString);\n    clipped = difference(poly, thickLinePolygon);\n\n    cutPolyGeoms = [];\n    for (j = 0; j < clipped.geometry.coordinates.length; j++) {\n      polyg = polygon(clipped.geometry.coordinates[j]);\n      intersect = lineIntersect(polyg, offsetLine[forSelect]);\n      if (intersect.features.length > 0) {\n        cutPolyGeoms.push(polyg.geometry.coordinates);\n      }\n    }\n\n    cutPolyGeoms.forEach(function (geometry, index) {\n      id = idPrefix + (i + 1) + '.' + (index + 1);\n      cutFeatures.push(\n        polygon(geometry, {\n          id: id,\n        })\n      );\n    });\n  }\n\n  if (cutFeatures.length > 0) retVal = featureCollection(cutFeatures);\n\n  return retVal;\n}\n","import React, { useRef, useEffect } from 'react';\nimport mapboxGl from 'mapbox-gl';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport SplitPolygunMode from 'mapbox-gl-draw-split-polygon-mode';\nimport './App.css';\n\nlet map;\nlet draw;\nlet drawBar;\n\nclass extendDrawBar {\n  constructor(opt) {\n    let ctrl = this;\n    ctrl.draw = opt.draw;\n    ctrl.buttons = opt.buttons || [];\n    ctrl.onAddOrig = opt.draw.onAdd;\n    ctrl.onRemoveOrig = opt.draw.onRemove;\n  }\n  onAdd(map) {\n    let ctrl = this;\n    ctrl.map = map;\n    ctrl.elContainer = ctrl.onAddOrig(map);\n    ctrl.buttons.forEach((b) => {\n      ctrl.addButton(b);\n    });\n    return ctrl.elContainer;\n  }\n  onRemove(map) {\n    let ctrl = this;\n    ctrl.buttons.forEach((b) => {\n      ctrl.removeButton(b);\n    });\n    ctrl.onRemoveOrig(map);\n  }\n  addButton(opt) {\n    let ctrl = this;\n    var elButton = document.createElement('button');\n    elButton.className = 'mapbox-gl-draw_ctrl-draw-btn';\n    if (opt.classes instanceof Array) {\n      opt.classes.forEach((c) => {\n        elButton.classList.add(c);\n      });\n    }\n    elButton.addEventListener(opt.on, opt.action);\n    ctrl.elContainer.appendChild(elButton);\n    opt.elButton = elButton;\n  }\n  removeButton(opt) {\n    opt.elButton.removeEventListener(opt.on, opt.action);\n    opt.elButton.remove();\n  }\n}\n\nfunction App() {\n  if (mapboxGl.getRTLTextPluginStatus() === 'unavailable')\n    mapboxGl.setRTLTextPlugin(\n      'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js',\n      (err) => {\n        err && console.error(err);\n      },\n      true\n    );\n  let mapRef = useRef(null);\n\n  useEffect(() => {\n    map = new mapboxGl.Map({\n      container: mapRef.current || '',\n      style: `https://map.ir/vector/styles/main/mapir-xyz-light-style.json`,\n      center: [51.3857, 35.6102],\n      zoom: 10,\n      pitch: 0,\n      interactive: true,\n      hash: true,\n      attributionControl: true,\n      customAttribution: '© Map © Openstreetmap',\n      transformRequest: (url) => {\n        return {\n          url: url,\n          headers: {\n            'x-api-key':\n              'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRiZWU0YWU4OTk4OTA3MmQ3OTFmMjQ4ZDE5N2VhZTgwZWU2NTUyYjhlYjczOWI2NDdlY2YyYzIzNWRiYThiMzIzOTM5MDkzZDM0NTY2MmU3In0.eyJhdWQiOiI5NDMyIiwianRpIjoiZGJlZTRhZTg5OTg5MDcyZDc5MWYyNDhkMTk3ZWFlODBlZTY1NTJiOGViNzM5YjY0N2VjZjJjMjM1ZGJhOGIzMjM5MzkwOTNkMzQ1NjYyZTciLCJpYXQiOjE1OTA4MjU0NzIsIm5iZiI6MTU5MDgyNTQ3MiwiZXhwIjoxNTkzNDE3NDcyLCJzdWIiOiIiLCJzY29wZXMiOlsiYmFzaWMiXX0.M_z4xJlJRuYrh8RFe9UrW89Y_XBzpPth4yk3hlT-goBm8o3x8DGCrSqgskFfmJTUD2wC2qSoVZzQKB67sm-swtD5fkxZO7C0lBCMAU92IYZwCdYehIOtZbP5L1Lfg3C6pxd0r7gQOdzcAZj9TStnKBQPK3jSvzkiHIQhb6I0sViOS_8JceSNs9ZlVelQ3gs77xM2ksWDM6vmqIndzsS-5hUd-9qdRDTLHnhdbS4_UBwNDza47Iqd5vZkBgmQ_oDZ7dVyBuMHiQFg28V6zhtsf3fijP0UhePCj4GM89g3tzYBOmuapVBobbX395FWpnNC3bYg7zDaVHcllSUYDjGc1A', //dev api key\n            'Mapir-SDK': 'reactjs',\n          },\n        };\n      },\n    });\n    draw = new MapboxDraw({\n      modes: {\n        ...MapboxDraw.modes,\n        splitPolygunMode: SplitPolygunMode,\n      },\n      userProperties: true,\n    });\n    drawBar = new extendDrawBar({\n      draw: draw,\n      buttons: [\n        {\n          on: 'click',\n          action: splitPolygon,\n          classes: ['split-icon'],\n        },\n      ],\n    });\n    map.once('load', () => {\n      map.resize();\n      map.addControl(drawBar, 'top-right');\n      draw.set({\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {},\n            id: 'example-id',\n            geometry: {\n              type: 'Polygon',\n              coordinates: [\n                [\n                  [51.41742415918904, 35.73019558439101],\n                  [51.31319413385742, 35.702773908694724],\n                  [51.378997493472525, 35.665562843119986],\n                  [51.45008537540798, 35.67776544979942],\n                  [51.46619566741822, 35.70822028156377],\n                  [51.41742415918904, 35.73019558439101],\n                ],\n              ],\n            },\n          },\n        ],\n      });\n    });\n  }, []);\n  const splitPolygon = () => {\n    try {\n      draw?.changeMode('splitPolygonMode');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"map-wrapper\">\n      <div id=\"map\" ref={mapRef} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}